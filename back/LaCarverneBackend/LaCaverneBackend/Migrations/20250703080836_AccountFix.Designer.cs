// <auto-generated />
using LaCaverneBackend.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LaCaverneBackend.Migrations
{
    [DbContext(typeof(LaCaverneDbContext))]
    [Migration("20250703080836_AccountFix")]
    partial class AccountFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LaCaverneBackend.Database.Models.Account", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("CityName")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.Article", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ImageCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsParrotSelection")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<uint>("SellerId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<uint>("AccountId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ArticleId")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArticleId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.Notation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<uint>("AccountId")
                        .HasColumnType("int unsigned");

                    b.Property<uint?>("ArticleId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<uint?>("SellerId")
                        .HasColumnType("int unsigned");

                    b.Property<byte>("Stars")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("SellerId");

                    b.ToTable("Notations");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.Seller", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<uint>("AccountId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.Tag", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.TagAccount", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<uint>("AccountId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("TagId")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TagId");

                    b.ToTable("TagAccounts");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.TagArticle", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ArticleId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("TagId")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("TagId");

                    b.ToTable("TagArticles");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.UserToken", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<uint>("AccountId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.Article", b =>
                {
                    b.HasOne("LaCaverneBackend.Database.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("LaCaverneBackend.Database.Models.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.Like", b =>
                {
                    b.HasOne("LaCaverneBackend.Database.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaCaverneBackend.Database.Models.Article", "Article")
                        .WithMany("Likes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.Notation", b =>
                {
                    b.HasOne("LaCaverneBackend.Database.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaCaverneBackend.Database.Models.Article", "Article")
                        .WithMany("Notations")
                        .HasForeignKey("ArticleId");

                    b.HasOne("LaCaverneBackend.Database.Models.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Account");

                    b.Navigation("Article");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.Seller", b =>
                {
                    b.HasOne("LaCaverneBackend.Database.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.TagAccount", b =>
                {
                    b.HasOne("LaCaverneBackend.Database.Models.Account", "Account")
                        .WithMany("PreferredTags")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaCaverneBackend.Database.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.TagArticle", b =>
                {
                    b.HasOne("LaCaverneBackend.Database.Models.Article", "Article")
                        .WithMany("Tags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaCaverneBackend.Database.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.UserToken", b =>
                {
                    b.HasOne("LaCaverneBackend.Database.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.Account", b =>
                {
                    b.Navigation("PreferredTags");
                });

            modelBuilder.Entity("LaCaverneBackend.Database.Models.Article", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Notations");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
